<class>
  <keyword> class </keyword>
  <identifier> name=Main(unrecorded) </identifier>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> name=main(unrecorded) </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> name=Array(unrecorded) </identifier>
        <identifier> name=a kind=var type=Array index=0 </identifier>
        <symbol> , </symbol>
        <identifier> name=b kind=var type=Array index=1 </identifier>
        <symbol> , </symbol>
        <identifier> name=c kind=var type=Array index=2 </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statementList>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=a kind=var type=Array index=0 </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=Array(unrecorded) </identifier>
              <symbol> . </symbol>
              <identifier> name=new(unrecorded) </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 10 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=b kind=var type=Array index=1 </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=Array(unrecorded) </identifier>
              <symbol> . </symbol>
              <identifier> name=new(unrecorded) </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 5 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=c kind=var type=Array index=2 </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=Array(unrecorded) </identifier>
              <symbol> . </symbol>
              <identifier> name=new(unrecorded) </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=a kind=var type=Array index=0 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=a kind=var type=Array index=0 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 8 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=a kind=var type=Array index=0 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=b kind=var type=Array index=1 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <identifier> name=a kind=var type=Array index=0 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=a kind=var type=Array index=0 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=a kind=var type=Array index=0 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <identifier> name=b kind=var type=Array index=1 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> name=a kind=var type=Array index=0 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=a kind=var type=Array index=0 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> name=a kind=var type=Array index=0 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier> name=b kind=var type=Array index=1 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <integerConstant> 7 </integerConstant>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <identifier> name=a kind=var type=Array index=0 </identifier>
                          <symbol> [ </symbol>
                          <expression>
                            <term>
                              <integerConstant> 3 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ] </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <identifier> name=Main(unrecorded) </identifier>
                      <symbol> . </symbol>
                      <identifier> name=double(unrecorded) </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 2 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=c kind=var type=Array index=2 </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> null </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=c kind=var type=Array index=2 </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> name=c kind=var type=Array index=2 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printString(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Test 1: expected result: 5; actual result:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printInt(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> name=b kind=var type=Array index=1 </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=println(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printString(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Test 2: expected result: 40; actual result:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printInt(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> name=a kind=var type=Array index=0 </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 5 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=println(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printString(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Test 3: expected result: 0; actual result:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printInt(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> name=c kind=var type=Array index=2 </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=println(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> name=c kind=var type=Array index=2 </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> null </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> name=c kind=var type=Array index=2 </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <keyword> null </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statementList>
            <doStatement>
              <keyword> do </keyword>
              <identifier> name=Main(unrecorded) </identifier>
              <symbol> . </symbol>
              <identifier> name=fill(unrecorded) </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> name=a kind=var type=Array index=0 </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 10 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=c kind=var type=Array index=2 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=a kind=var type=Array index=0 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=c kind=var type=Array index=2 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 33 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=c kind=var type=Array index=2 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=a kind=var type=Array index=0 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=c kind=var type=Array index=2 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 77 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=b kind=var type=Array index=1 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=a kind=var type=Array index=0 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=b kind=var type=Array index=1 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=b kind=var type=Array index=1 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> name=c kind=var type=Array index=2 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statementList>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printString(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Test 4: expected result: 77; actual result:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printInt(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> name=c kind=var type=Array index=2 </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=println(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printString(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Test 5: expected result: 110; actual result:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=printInt(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> name=b kind=var type=Array index=1 </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> name=Output(unrecorded) </identifier>
          <symbol> . </symbol>
          <identifier> name=println(unrecorded) </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statementList>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> name=double(unrecorded) </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> name=a kind=arg type=int index=0 </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statementList>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> name=a kind=arg type=int index=0 </identifier>
            </term>
            <symbol> * </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statementList>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> name=fill(unrecorded) </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> name=Array(unrecorded) </identifier>
      <identifier> name=a kind=arg type=Array index=0 </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> name=size kind=arg type=int index=1 </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statementList>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> name=size kind=arg type=int index=1 </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statementList>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=size kind=arg type=int index=1 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=size kind=arg type=int index=1 </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> name=a kind=arg type=Array index=0 </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> name=size kind=arg type=int index=1 </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> name=Array(unrecorded) </identifier>
                  <symbol> . </symbol>
                  <identifier> name=new(unrecorded) </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statementList>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statementList>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
