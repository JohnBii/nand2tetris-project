// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var Array location;

        let location = 16384;
        while (location < 24576) {
            let location[0] = 0;
            let location = location + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int n, c;
        var Array location;

        let location = 16384 + (y * 32) + (x / 16);
        let c = x - ((x / 16) * 16);
        let n = 1;
        while (c > 0) {
            let n = n * 2;
            let c = c - 1;
        }
        
        if (color) {
            let location[0] = location[0] | n;
        }
        else {
            let location[0] = location[0] & ~n;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, adyMinusbdx, a, b, sa, sb;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;
        let a = 0;
        let b = 0;

        if (dx < 0) {
            let sa = -1;
            let dx = -dx;
        }
        else {
            let sa = 1;
        }
        if (dy < 0) {
            let sb = -1;
            let dy = -dy;
        }
        else {
            let sb = 1;
        }

        if (dy = 0) {
            while (a < dx | (a = dx)) {
                do Screen.drawPixel(x1 + (sa * a), y1);
                let a = a + 1;
            }
        }
        else {
            while (a < dx | (a = dx) & ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + (sa * a), y1 + (sb * b));
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                }
                else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;

        if (y2 - y1 = 0 | (x2 - x1 = 0)) {
            do Sys.error(20);
        }

        if (y2 - y1 > 0) {
            let dy = 1;
        }
        else {
            let dy = -1;
        }

        while (~(y1 = y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + dy;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, temp;
        if (r > 181 | (r < 1)) {
            do Sys.error(21);
        }
        
        let dy = -r;
        while (~(dy = r)) {
            let temp = Math.sqrt(r * r - (dy * dy));
            do Screen.drawLine(x - temp, y + dy, x + temp, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
