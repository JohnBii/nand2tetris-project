// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int n, i;

        let i = 0;
        let n = 1;
        let twoToThe = Array.new(16);
        while (i < 16) {
            let twoToThe[i] = n;
            let i = i + 1;
            let n = n + n;
        }

        return;
    }

    function boolean bit(int x, int j) {
        if (j > 15 | (j < 0)) {
            do Sys.error(7);
        }
        return x & twoToThe[j];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (Math.bit(x, 15)) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** x <= y */
    function boolean le(int x, int y) {
        return x < y | (x = y);
    }

    /** x >= y */
    function boolean ge(int x, int y) {
        return x > y | (x = y);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j, bit;

        let sum = 0;
        let shiftedX = x;
        let j = 0;
        let bit = 1;

        while (j < 16) {
            if ((y & bit) = bit) {
                let sum = sum + shiftedX;
            }
            let bit = bit + bit;
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** x*x */
    function int square(int x) {
        return x * x;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */

    function int Div(int x, int y) {
        var int q;

        if (x < y | (y < 0)) {
            return 0;
        }
        let q = Math.Div(x, y + y);
        if (x - (2 * q * y) < y) {
            return q + q;
        }
        else {
            return q + q + 1;
        }
    }

    function int divide(int x, int y) {
        var int s;
        
        if (y = 0) {
            do Sys.error(7);
        }
        if (Math.bit(x, 15) = Math.bit(y, 15)) {
            let s = 1;
        }
        else {
            let s = -1;
        }

        return s * Math.Div(Math.abs(x), Math.abs(y));
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;

        let y = 0;
        let j = 7;
        while (j > -1) {
            if (Math.le(Math.square(y + twoToThe[j]), x) & (Math.square(y + twoToThe[j]) > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (Math.ge(a, b)) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (Math.le(a, b)) {
            return a;
        }
        else {
            return b;
        }
    }
}
